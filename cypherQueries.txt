# 1. 3 most cited papers per venue

    Steps:
    1. 


    MATCH (p:Paper)-[:PUBLISHED\_IN]->(v:Venue)\\
    WHERE v.type IN ["conference", "workshop"]\\

    WITH v.venue AS venueName, v.year AS year, p
    ORDER BY p.citationCount DESC
    WITH venueName, year, COLLECT({title: p.title, citationCount: p.citationCount})[0..3] AS topPapers


# 2. Per venue (in general, not one specific edition), find the author community with authors that have published in 4 different editions of that venue

    MATCH (a:Author)-[:FIRST_AUTHORED|CO_AUTHORED]->(p:Paper)-[:PUBLISHED_IN]->(v:Venue)
    WHERE v.type IN ["conference", "workshop"]
    WITH a.name AS authorName, v.venue AS venueName, COLLECT(DISTINCT v.year) AS years
    WHERE SIZE(years) >= 4
    RETURN venueName, authorName, SIZE(years) AS editionsPublishedIn
    ORDER BY venueName, editionsPublishedIn DESC;



# 3. Find Impact Factor per Journal

    Steps: 
    1 Count all citings from 2023 for Papers published in 2022 and 2021 in the same Journal
    2. Count all papers, published in that journal in 2022, 2021
    3. divide the citings from 1. by the papers from 2. 

    Cypher Query for 2023:
    MATCH (citing:Paper)-[:CITES]->(cited:Paper)-[:PUBLISHED_IN]->(v:Venue)
    WHERE v.type = "journal" AND cited.year IN [2021, 2022] AND citing.year = 2023
    WITH v, COUNT(citing) AS totalCitations

    MATCH (j)<-[:PUBLISHED_IN]-(p:Paper)
    WHERE p.year IN [2021, 2022]
    WITH v.venue AS journalName, totalCitations, COUNT(p) AS paperCount
    RETURN journalName, 
        totalCitations * 1.0 / paperCount AS impactFactor
    ORDER BY impactFactor DESC;

    ################################ OR #####################
    WITH 2023 AS targetYear
    WITH targetYear, [targetYear - 1, targetYear - 2] AS previousYears

    // Count how many times papers from the previous two years were cited in the target year
    MATCH (citing:Paper)-[:CITES]->(cited:Paper)-[:PUBLISHED_IN]->(v:Venue)
    WHERE v.type = "journal" AND cited.year IN previousYears AND citing.year = targetYear
    WITH v, COUNT(citing) AS totalCitations, previousYears, targetYear

    // Count how many papers were published by the journal in those two years
    MATCH (v)<-[:PUBLISHED_IN]-(p:Paper)
    WHERE p.year IN previousYears
    WITH v.venue AS journalName, totalCitations, COUNT(p) AS paperCount
    WHERE paperCount > 0
    RETURN journalName, 
        totalCitations * 1.0 / paperCount AS impactFactor,
        totalCitations, paperCount
    ORDER BY impactFactor DESC;


# 4. Find hIndex per Author

    Steps:
    1. list the citation counts of all their papers
    2. order them ascending (to attack the list by its last /highest element)
    3. create an index range that counts the citations in an ascending array from 0 to i
    4. takes the list from behind lol (sortedcitations[-i-1]) and compares to the amount of papers so far (i+1) 
    and adds the count of the successfull comparisons to the hcandidates array
    5. For each author it checks the hCandicdates list count if its zero and if its not, for the highest entry

    MATCH (a:Author)-[:FIRST_AUTHORED|CO_AUTHORED]->(p:Paper)
    WITH a.name AS authorName, collect(p.citationCount) AS citations

    WITH authorName, apoc.coll.sort(citations) AS sortedCitations
    WITH authorName, 
        [i IN range(0, size(sortedCitations)-1) 
        WHERE sortedCitations[-i-1] >= i+1 | i+1] AS hCandidates

    WITH authorName, hCandidates, 
        CASE 
            WHEN size(hCandidates) = 0 THEN 0 
            ELSE max(hCandidates) 
        END AS hIndex

    RETURN authorName, hIndex
    ORDER BY hIndex DESC;